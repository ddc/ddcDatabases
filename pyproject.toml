[build-system]
requires = ["poetry-core>=2.0.0,<3.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.poetry]
name = "ddcDatabases"
version = "1.0.25"
description = "Database ORM Connections and Queries"
license = "MIT"
readme = "README.md"
authors = ["Daniel Costa <danieldcsta@gmail.com>"]
maintainers = ["Daniel Costa"]
repository = "https://github.com/ddc/ddcDatabases"
homepage = "https://pypi.org/project/ddcDatabases"
packages = [{include = "ddcDatabases"}]
package-mode = true
keywords = [
    "python3", "python-3", "python",
    "databases", "database", "ddcDatabases",
    "mongodb", "mongodb-database",
    "mssql", "mssql-database",
    "mysql", "mysql-database",
    "oracle", "oracle-database",
    "pgsql", "postgres", "postgresql", "postgressql", "postgresql-database",
    "sqlite", "sqlite3", "sqlite3-database",
]
classifiers = [
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Development Status :: 5 - Production/Stable",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3 :: Only",
    "Operating System :: OS Independent",
    "Environment :: Other Environment",
    "Intended Audience :: Developers",
    "Natural Language :: English",
]

[tool.poetry.build]
script = "build.py"
generate-setup-file = false

[tool.poetry.group.test]
optional = true

[tool.poetry.dependencies]
python = "^3.12"
aioodbc = "^0.5.0"
asyncpg = "^0.30.0"
aiomysql = "^0.2.0"
cx-oracle = "^8.3.0"
greenlet = "^3.2.3"
pymongo = "^4.13.2"
pymysql = "^1.1.1"
psycopg2-binary = "^2.9.10"
pydantic-settings = "^2.10.1"
pyodbc = "^5.2.0"
SQLAlchemy = "^2.0.41"

[tool.poetry.extras]
mongodb = ["pymongo"]
mssql = ["pyodbc", "aioodbc"]
mysql = ["pymysql", "aiomysql"]
oracle = ["cx-oracle"]
pgsql = ["psycopg2-binary", "asyncpg"]
all = ["pymongo", "pyodbc", "aioodbc", "pymysql", "aiomysql", "cx-oracle", "psycopg2-binary", "asyncpg"]

[tool.poetry.group.test.dependencies]
coverage = "^7.9.2"
faker = "^37.4.2"
poethepoet = "^0.36.0"
pytest = "^8.4.1"
pytest-asyncio = "^1.1.0"

[tool.poe.tasks]
_test = "coverage run -m pytest -v"
_coverage_report = "coverage report"
_coverage_xml = "coverage xml"
tests = ["_test", "_coverage_report", "_coverage_xml"]
test = ["tests"]

[tool.black]
line-length = 120
skip-string-normalization = true

[tool.coverage.run]
omit = [
    "tests/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
]
